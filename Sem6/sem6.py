import random

# sp = []
# for _ in range(10):
#     sp.append(random.randint(-10, 10))
# print(sp)


# sp = [random.randint(-10, 10) for _ in range(10)]
# print(sp)

# print(sp := [random.randint(-10, 10) for _ in range(10)])
# print(*sp)


# sp = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# # возведем все знач. в квадрат
# print([el**2 for el in sp])
# # возвед. нечетн. чисел в квадрат(кол-во сократилось)
# print([el**2 for el in sp if el % 2])
# # возведем все нечетн. в квадрат,а четные обнулим(кол-во осталось)
# print([el**2 if el % 2 else 0 for el in sp])


# # генератор словарей
# d = {str(i): sp[i] for i in range(len(sp))}
# print(d)
# dd = {}
# for i in range(len(sp)):
#     dd[str(i)] = sp[i]
# print(dd)

# ------------------------------------------------------------------------

# Задача №1. Решение в группах
# Даны два массива чисел. Требуется вывести те элементы
# первого массива (в том порядке, в каком они идут в первом
# массиве), которых нет во втором массиве. Пользователь вводит
# число N - количество элементов в первом массиве, затем N
# чисел - элементы массива. Затем число M - количество
# элементов во втором массиве. Затем элементы второго массива
# Ввод: Вывод:
# 7 3 3 2 12
# 3 1 3 4 2 4 12
# 6
# 4 15 43 1 15 1

# first = [3, 1, 3, 4, 2, 4, 12]
# second = set([4, 15, 43, 1, 15, 1])
# res = []
# for i in first:
#     if i not in second:
#         res.append(i)
# print(res)

# print([i for i in first if i not in second])

# --------------------------------------------------------------------------
# Задача №2. Решение в группах
# Дан массив, состоящий из целых чисел. Напишите
# программу, которая в данном массиве определит
# количество элементов, у которых два соседних и, при
# этом, оба соседних элемента меньше данного. Сначала
# вводится число N — количество элементов в массиве
# Далее записаны N чисел — элементы массива. Массив
# состоит из целых чисел.
# Ввод: Ввод:
# 5 5
# 1 2 3 4 5 1 5 1 5 1
# Вывод: Вывод:
# 0 2


# def is_champ(i):
#     return n[i] > n[i - 1] and n[i] > n[(i + 1) % len(n)]


# n = [1, 5, 1, 5, 1]
# # count = 0
# # for i in range(len(n)):
# #     if n[i] > n[i - 1] and n[i] > n[(i + 1) % len(n)]:
# #         count += 1
# # print(count)

# print(sum([1 for i in range(len(n)) if is_champ(i)]))

# ----------------------------------------------------------

# Задача №4. Решение в группах
# Два различных натуральных числа n и m называются
# дружественными, если сумма делителей числа n
# (включая 1, но исключая само n) равна числу m и
# наоборот. Например, 220 и 284 – дружественные числа.
# По данному числу k выведите все пары дружественных
# чисел, каждое из которых не превосходит k. Программа
# получает на вход одно натуральное число k, не
# превосходящее 105
# . Программа должна вывести все
# пары дружественных чисел, каждое из которых не
# превосходит k. Пары необходимо выводить по одной в
# строке, разделяя пробелами. Каждая пара должна быть
# выведена только один раз (перестановка чисел новую
# пару не дает).
# Ввод: Вывод:
# 300 220 284

# def sum_number_divisors(a):
#     summ = 1
#     for i in range(2, int(a**0.5 + 1)):
#         if a % i == 0:
#             summ += i
#             if i != a // i:
#                 summ += a // i
#     return summ


# k = 1500
# for n in range(1, k + 1):
#     n_summ = sum_number_divisors(n)
#     if n_summ > n and sum_number_divisors(n_summ) == n:
#         print(n, n_summ)


# print(
#     [
#         (n, sum_number_divisors(n))
#         for n in range(1, k + 1)
#         if sum_number_divisors(n) > n
#         and sum_number_divisors(sum_number_divisors(n)) == n
#     ]
# )

# ----------------------------------------------------------------------------
