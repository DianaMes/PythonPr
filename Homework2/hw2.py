# Допзадание 1 - Пользователь вводит любое число (дробное или целое), надо посчитать
# количество цифр в числе. Решаем строго математически, обращаться к числу как к строке нельзя.

# 0 -> 1
# 9 -> 1
# 56.77 -> 4
# -0.0001 - > 5
# 100.18006 ->8

# def count_digits(num):
#     if num == 0:
#         return 1

#     num = abs(num)  # Берем модуль числа, чтобы не учитывать знак минус

#     # Удаляем дробную часть, пока не останется целая
#     while num != int(num):
#         num *= 10

#     num = int(num)  # Преобразуем к целому числу после удаления дробной части
#     count = 0

#     while num > 0:
#         num //= 10
#         count += 1

#     return count

# # Запрашиваем ввод числа у пользователя
# input_number = float(input("Введите число: "))
# digit_count = count_digits(input_number)
# print(f"Количество цифр в числе: {digit_count}")

# ----------------------------------------------------------------------------------------------

# Допзадание 2

# Валентина прогуляла лекцию по математике.
# Преподаватель решил подшутить над нерадивой студенткой и
# попросил ее на практическом занятии перечислить все положительные делители некоторых целых чисел.
# Для несложных примеров студентка быстро нашла решения (для числа 6 это: 1, 2, 3, 6; а для числа 16 это:
#                                                         1, 2, 4, 8, 16), но этим все не закончилось.
# На домашнее задание ей дали варианты посложнее: 23436, 190187200, 380457890232.

# def find_divisors(n):
#     divisors = set()  # Используем множество, чтобы избежать дублирования делителей
#     for i in range(1, int(n ** 0.5) + 1):
#         if n % i == 0:  # Если i делит n без остатка
#             divisors.add(i)
#             divisors.add(n // i)
#     return sorted(divisors)

# # Числа для которых нужно найти делители
# numbers = [23436, 190187200, 380457890232]

# # Находим и выводим делители для каждого числа
# for number in numbers:
#     print(f"Делители числа {number}: {find_divisors(number)}")

# ----------------------------------------------------------------------------

# Задача 1
# На столе лежат n монеток. Некоторые из монеток лежат вверх решкой, а некоторые – гербом. 
# Ваша задача - определить минимальное количество монеток, которые нужно перевернуть, чтобы все монетки 
# лежали одной и той же стороной вверх.
# Входные данные:
# На вход программе подается список coins, где coins[i] равно 0, если i-я монетка лежит гербом вверх, 
# и равно 1, если i-я монетка лежит решкой вверх. Размер списка не превышает 1000 элементов.
# Выходные данные:
# Программа должна вывести одно целое число - минимальное количество монеток, которые нужно перевернуть.
# Пример использования На входе:
# coins = [0, 1, 0, 1, 1, 0]
# На выходе:
# 3

# def min_flips(coins):
#     # Считаем количество монеток решкой вверх
#     count_tails = sum(coins)
#     # Считаем количество монеток гербом вверх
#     count_heads = len(coins) - count_tails
#     # Возвращаем минимальное количество переворотов
#     return min(count_tails, count_heads)

# # Пример использования
# coins = [0, 1, 0, 1, 1, 0]
# print(min_flips(coins))  # Вывод: 3

# -------------------------------------------------------------------------------------

# Задача 2
# Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. Петя помогает Кате по математике.
# Он задумывает два натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать. Для этого Петя делает две подсказки. 
# Он называет сумму этих чисел S и их произведение P. Помогите Кате отгадать задуманные Петей числа.
# Примечание: числа S и P задавать не нужно, они будут передаваться в тестах.
# В результате вы должны вывести все возможные пары чисел X и Y через пробел, такие что X <= Y.
# Пример:
# На входе:
# s = 12
# p = 27
# На выходе:
# 3 9

# def find_numbers(S, P):
#     pairs = []
#     for X in range(1, S):
#         Y = S - X
#         if X * Y == P and X <= Y:
#             pairs.append((X, Y))
#     return pairs

# # Пример использования:
# S = 12
# P = 27
# result = find_numbers(S, P)
# for x, y in result:
#     print(x, y)

# ----------------------------------------------------------------------------------------------

# Задача 3
# Требуется вывести все целые степени двойки (т.е. числа вида 2k), не превосходящие числаN.
# Пример
# n=16
# Вывод
# 1
# 2
# 4
# 8
# 16

# Ввод числа N
N = int(input("Введите число N: "))

# Начальное значение степени двойки
power_of_two = 1

# Цикл для нахождения всех степеней двойки, не превышающих N
while power_of_two <= N:
    # Вывод текущей степени двойки
    print(power_of_two)
    # Переход к следующей степени двойки
    power_of_two *= 2
